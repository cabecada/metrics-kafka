ext {
    gradleVersion = "2.0"
    mavenURL = ""
    mavenUsername = ""
    mavenPassword = ""
}

subprojects {
    apply plugin:'java'
    apply plugin: "maven"
    apply plugin: "signing"

    version = "0.1"

    repositories {
        mavenCentral()
        maven {
            url = 'http://clojars.org/repo'
        }
    }

    configurations {
        deployerJars
    }

    uploadArchives {
        signing {
            sign configurations.archives
            repositories.mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.groupId = 'ly.stealth'
                pom.artifactId = project.name
                pom.version = version
                pom.project {
                    name project.name
                    packaging 'jar'
                    url 'http://github.com/stealthly/metrics-kafka'
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
                configuration = configurations.deployerJars
                repository(url: "${mavenURL}") {
                    authentication(userName: "${mavenUsername}", password: "${mavenPassword}")
                }
            }
        }
    }

    dependencies {
        deployerJars "org.apache.maven.wagon:wagon-http:2.2"
    }
}

tasks.withType(Javadoc) {
    task srcJar(type:Jar) {
        classifier = 'sources'
        from '../LICENSE'
        from sourceSets.main.java
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from '../LICENSE'
        from javadoc.destinationDir
    }

    task docsJar(type: Jar, dependsOn: javadocJar) { }

    artifacts {
        archives srcJar
        archives javadocJar
    }
}

project (':codahale') {
    apply plugin:'scala'

    test {
        doFirst {
            file('target').mkdirs();
        }

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat = 'full'
        }

        doLast {
            file('target').delete();
        }
    }

    dependencies {
        compile 'org.apache.kafka:kafka_2.10:0.8.1'
        compile 'org.slf4j:slf4j-log4j12:1.7.7'
        compile 'com.codahale.metrics:metrics-core:3.0.1'
        compile 'com.codahale.metrics:metrics-json:3.0.1'
        compile project(':graphite')

        testCompile 'junit:junit:4.11'
        testCompile 'org.jbehave.site:jbehave-site-resources:3.1.1'
        testCompile 'de.codecentric:jbehave-junit-runner:1.0.1'
        testCompile 'org.jbehave:jbehave-core:3.8'
    }
}

project (':yammer') {

    dependencies {
        compile 'org.apache.kafka:kafka_2.10:0.8.1'
        compile 'org.slf4j:slf4j-log4j12:1.7.7'
        compile 'com.codahale.metrics:metrics-core:3.0.1'
        compile 'com.codahale.metrics:metrics-json:3.0.1'

        testCompile 'junit:junit:4.11'
        testCompile 'org.jbehave.site:jbehave-site-resources:3.1.1'
        testCompile 'de.codecentric:jbehave-junit-runner:1.0.1'
        testCompile 'org.jbehave:jbehave-core:3.8'
    }
}

project (':riemann') {
    apply plugin:'scala'

    task specs(type: JavaExec, dependsOn: testClasses) {
        main = 'org.specs2.files'
        args = ['console']
        classpath sourceSets.main.runtimeClasspath
        classpath sourceSets.test.runtimeClasspath
        classpath configurations.testRuntime
        classpath configurations.runtime
    }

    test.dependsOn specs
    test.dependsOn ":psutil:test"

    dependencies {
        compile project(':codahale')
        compile project(':psutil-entities')
        compile 'org.scala-lang:scala-library:2.10.3'
        compile 'net.benmur:riemann-scala-client_2.10:0.3.1'

        testCompile 'org.specs2:specs2_2.10:2.2.2'
    }
}

project (':metrics-test') {
    apply plugin: 'scala'
    apply plugin: 'application'

    mainClassName = "ly.stealth.psutil.PsutilKafka"

    run {
        args Eval.me("['psutil-kafka-topic','localhost','5555','localhost:2181']")
    }

    dependencies {
        compile project(":riemann")
        compile project(":psutil")
        compile project(":psutil-statsd")
    }
}

project (':psutil') {

    jar {
        from 'src/main/python/psutil_producer.py'
    }

    task installDependencies(type:Exec) {
        commandLine 'sudo', "$rootDir/vagrant/psutil.sh"
    }

    task runPython(type:Exec) {
        commandLine 'sudo', "docker", "run", "--link", "broker1:localhost", "--rm", "-v", "$rootDir/psutil/src/main/python:/psutil", "stealthly/docker-python", "python", "/psutil/psutil_producer_test.py"
    }

    test.dependsOn runPython
}

project (':psutil-entities') {
    apply plugin:'scala'

    dependencies {
        compile 'org.apache.kafka:kafka_2.10:0.8.1'
        compile 'com.fasterxml.jackson.core:jackson-core:2.4.1'
        compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.1'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.4.1'
        compile 'org.slf4j:slf4j-log4j12:1.7.7'
    }
}

project (':psutil-statsd') {
    apply plugin:'scala'

    dependencies {
        compile 'org.apache.kafka:kafka_2.10:0.8.1'
        compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.1'
        compile 'org.slf4j:slf4j-log4j12:1.7.7'

        compile project(':statsd')
        compile project(':psutil-entities')
    }
}

project (':statsd') {
    apply plugin:'scala'

    dependencies {
        compile 'org.apache.kafka:kafka_2.10:0.8.1'
        compile 'org.slf4j:slf4j-log4j12:1.7.7'
        compile group: 'com.typesafe.akka', name: 'akka-actor_2.10', version: '2.2.3'

        testCompile 'junit:junit:4.11'
    }
}

project (':graphite') {
}